
package com.iconmaster.iconuscalc.gui;

import com.iconmaster.iconuscalc.exception.IconusCalcException;
import com.iconmaster.iconuscalc.file.Namespace;
import com.iconmaster.iconuscalc.manager.ErrorManager;
import com.iconmaster.iconuscalc.manager.HomeScreenManager;
import com.iconmaster.iconuscalc.manager.IControlManager;
import com.iconmaster.iconuscalc.manager.InputType;
import java.util.Stack;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author iconmaster
 */
public class MainGui extends javax.swing.JFrame {
    
    private final Stack<IControlManager> managers = new Stack<>();
    private IconusCalcException error;

    /**
     * Creates new form MainGui
     */
    public MainGui() {
        initComponents();
        registerKeyHooks();
        this.addManager(new HomeScreenManager());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new MainGuiPanel(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setName("mainPanel"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        mainPanel.getAccessibleContext().setAccessibleName("");
        mainPanel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    public void registerKeyHooks() {
        this.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                handleKeyPress(e,InputType.PRESS);
            }

            @Override
            public void keyPressed(KeyEvent e) {
                handleKeyPress(e,InputType.DOWN);
            }

            @Override
            public void keyReleased(KeyEvent e) {
                handleKeyPress(e,InputType.UP);
            }
        });
    }
    
    public void handleKeyPress(KeyEvent e, InputType type) {
        if (error!= null && type == InputType.PRESS) {
            error = null;
            return;
        }
        if (currentManager()!=null) {
            currentManager().onKey(e,type);
        }
    }

    public IControlManager currentManager() {
        return managers.peek();
    }

    public void addManager(IControlManager manager) {
        managers.push(manager);
        ((MainGuiPanel)this.mainPanel).addRenderer(manager.getRenderer());
        manager.getRenderer().setParent(this);
    }
    
    public void closeManager() {
        managers.pop();
        ((MainGuiPanel)this.mainPanel).closeRenderer();
    }

    public void displayError(IconusCalcException ex) {
        this.error = ex;
        this.addManager(new ErrorManager());
    }

    public IconusCalcException getError() {
        return error;
    }
}
